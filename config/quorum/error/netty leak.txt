D:\jdk-17.0.1\bin\java.exe -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:56957,suspend=y,server=n -Xmx1G -Xms1G -server -XX:+UseZGC -XX:MaxDirectMemorySize=2G -Dkafka.logs.dir=logs/ -Dlog4j.configuration=file:config/log4j.properties -Dio.netty.leakDetection.level=paranoid -javaagent:C:\Users\nicolchen\AppData\Local\JetBrains\IdeaIC2022.3\captureAgent\debugger-agent.jar=file:/C:/Users/nicolchen/AppData/Local/Temp/capture1.props -Dfile.encoding=UTF-8 @C:\Users\nicolchen\AppData\Local\Temp\idea_arg_file1231721069 kafka.Kafka config/kraft/server_idc_a.properties
Connected to the target VM, address: '127.0.0.1:56957', transport: 'socket'
SLF4J: A number (25) of logging calls during the initialization phase have been intercepted and are
SLF4J: now being replayed. These are subject to the filtering rules of the underlying logging system.
SLF4J: See also http://www.slf4j.org/codes.html#replay
[2025-08-08 14:51:33,430] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)
[2025-08-08 14:51:34,325] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)
[2025-08-08 14:51:41,183] INFO [ControllerServer id=1] Starting controller (kafka.server.ControllerServer)
[2025-08-08 14:51:43,079] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)
[2025-08-08 14:51:43,212] INFO [SocketServer listenerType=CONTROLLER, nodeId=1] Created data-plane acceptor and processors for endpoint : ListenerName(CONTROLLER) (kafka.network.SocketServer)
[2025-08-08 14:51:43,240] INFO authorizerStart completed for endpoint CONTROLLER. Endpoint is now READY. (org.apache.kafka.server.network.EndpointReadyFutures)
[2025-08-08 14:51:43,245] INFO [SharedServer id=1] Starting SharedServer (kafka.server.SharedServer)
[2025-08-08 14:51:44,499] INFO /jmx/rules/common.yaml: found 4 metric rules (io.opentelemetry.instrumentation.jmx.yaml.RuleParser)
[2025-08-08 14:51:44,530] INFO /jmx/rules/broker.yaml: found 34 metric rules (io.opentelemetry.instrumentation.jmx.yaml.RuleParser)
[2025-08-08 14:51:44,537] INFO /jmx/rules/controller.yaml: found 8 metric rules (io.opentelemetry.instrumentation.jmx.yaml.RuleParser)
[2025-08-08 14:51:45,368] INFO Initialized snapshots with IDs SortedSet() from D:\workspace_java\nicolchen\automq\kraft-combined-logs-idc-a\__cluster_metadata-0 (kafka.raft.KafkaMetadataLog$)
[2025-08-08 14:51:45,426] INFO [raft-expiration-reaper]: Starting (kafka.raft.TimingWheelExpirationService$ExpiredOperationReaper)
[2025-08-08 14:51:45,505] INFO [RaftManager id=1] Reading KRaft snapshot and log as part of the initialization (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:45,518] INFO [RaftManager id=1] Starting request manager with static voters: [localhost:9093 (id: 1 rack: null)] (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:45,657] INFO [RaftManager id=1] Completed transition to Unattached(epoch=0, voters=[1], electionTimeoutMs=1455) from null (org.apache.kafka.raft.QuorumState)
[2025-08-08 14:51:45,682] INFO [RaftManager id=1] Completed transition to CandidateState(localId=1, localDirectoryId=Rdn9axOmYnzds1YFEWqlbw,epoch=1, retries=1, voteStates={1=org.apache.kafka.raft.CandidateState$VoterState@20a24edf}, highWatermark=Optional.empty, electionTimeoutMs=1626) from Unattached(epoch=0, voters=[1], electionTimeoutMs=1455) (org.apache.kafka.raft.QuorumState)
[2025-08-08 14:51:45,711] INFO [RaftManager id=1] Completed transition to Leader(localReplicaKey=ReplicaKey(id=1, directoryId=Optional[Rdn9axOmYnzds1YFEWqlbw]), epoch=1, epochStartOffset=0, highWatermark=Optional.empty, voterStates={1=ReplicaState(replicaKey=ReplicaKey(id=1, directoryId=Optional.empty), endOffset=Optional.empty, lastFetchTimestamp=-1, lastCaughtUpTimestamp=-1, hasAcknowledgedLeader=true)}) from CandidateState(localId=1, localDirectoryId=Rdn9axOmYnzds1YFEWqlbw,epoch=1, retries=1, voteStates={1=org.apache.kafka.raft.CandidateState$VoterState@20a24edf}, highWatermark=Optional.empty, electionTimeoutMs=1626) (org.apache.kafka.raft.QuorumState)
[2025-08-08 14:51:45,726] INFO Created Gauge for kafka.network.threads.idle.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,726] INFO Created Counter for kafka.broker.network.io (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,727] INFO Created Counter for kafka.broker.network.io (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,742] INFO Created Gauge for kafka.request.size.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,745] INFO Created Gauge for kafka.request.size.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,746] INFO Created Gauge for kafka.request.size.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,749] INFO Created Gauge for kafka.request.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,752] INFO Created Gauge for kafka.request.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,752] INFO Created Gauge for kafka.request.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,756] INFO Created Counter for kafka.request.queue.time.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,757] INFO Created Gauge for kafka.request.queue.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,759] INFO Created Gauge for kafka.request.queue.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,760] INFO Created Gauge for kafka.request.queue.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,762] INFO Created Counter for kafka.response.queue.time.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,763] INFO Created Gauge for kafka.response.queue.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,764] INFO Created Gauge for kafka.response.queue.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,764] INFO Created Gauge for kafka.response.queue.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,764] INFO Created Gauge for kafka.request.queue.size (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,765] INFO Created Gauge for kafka.available.request.size (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,766] INFO Created Gauge for kafka.response.queue.size (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,766] INFO Created Counter for kafka.logs.flush.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,766] INFO Created Gauge for kafka.logs.flush.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,767] INFO Created Gauge for kafka.logs.flush.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,767] INFO Created Gauge for kafka.logs.flush.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,768] INFO Created Gauge for kafka.log.end.offset (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,774] INFO Created Gauge for kafka.log.size (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,775] INFO Created Gauge for kafka.broker.active.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,775] INFO Created Gauge for kafka.broker.fenced.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,775] INFO Created Gauge for kafka.topic.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,775] INFO Created Gauge for kafka.partition.total.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,777] INFO Created Gauge for kafka.partition.offline.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:51:45,802] INFO [kafka-1-raft-outbound-request-thread]: Starting (org.apache.kafka.raft.KafkaNetworkChannel$SendThread)
[2025-08-08 14:51:45,802] INFO [kafka-1-raft-io-thread]: Starting (org.apache.kafka.raft.KafkaRaftClientDriver)
[2025-08-08 14:51:45,927] INFO [MetadataLoader id=1] initializeNewPublishers: The loader is still catching up because we have loaded up to offset -1, but the high water mark is 1 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:45,928] INFO [RaftManager id=1] High watermark set to LogOffsetMetadata(offset=1, metadata=Optional[(segmentBaseOffset=0,relativePositionInSegment=91)]) for the first time for epoch 1 based on indexOfHw 0 and voters [ReplicaState(replicaKey=ReplicaKey(id=1, directoryId=Optional.empty), endOffset=Optional[LogOffsetMetadata(offset=1, metadata=Optional[(segmentBaseOffset=0,relativePositionInSegment=91)])], lastFetchTimestamp=-1, lastCaughtUpTimestamp=-1, hasAcknowledgedLeader=true)] (org.apache.kafka.raft.LeaderState)
[2025-08-08 14:51:45,944] INFO [ControllerServer id=1] Waiting for controller quorum voters future (kafka.server.ControllerServer)
[2025-08-08 14:51:45,944] INFO [ControllerServer id=1] Finished waiting for controller quorum voters future (kafka.server.ControllerServer)
[2025-08-08 14:51:45,967] INFO [RaftManager id=1] Registered the listener org.apache.kafka.image.loader.MetadataLoader@1692459934 (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:45,969] INFO [RaftManager id=1] Setting the next offset of org.apache.kafka.image.loader.MetadataLoader@1692459934 to 0 since there are no snapshots (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:45,984] INFO [MetadataLoader id=1] maybePublishMetadata(LOG_DELTA): The loader is still catching up because we have not loaded a controller record as of offset 0 and high water mark is 1 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,030] INFO [MetadataLoader id=1] initializeNewPublishers: The loader finished catching up to the current high water mark of 1 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,117] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing SnapshotGenerator with a snapshot at offset 0 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,261] INFO [RaftManager id=1] Registered the listener org.apache.kafka.controller.QuorumController$QuorumMetaLogListener@286616132 (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:46,261] INFO [RaftManager id=1] Setting the next offset of org.apache.kafka.controller.QuorumController$QuorumMetaLogListener@286616132 to 0 since there are no snapshots (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:46,292] INFO [controller-1-ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,293] INFO [controller-1-ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,296] INFO [controller-1-ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,305] INFO [controller-1-ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,313] INFO [controller-1-ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,361] INFO [ExpirationReaper-1-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,409] INFO [RaftManager id=1] Registered the listener kafka.autobalancer.AutoBalancerListener@885827599 (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:46,409] INFO [RaftManager id=1] Setting the next offset of kafka.autobalancer.AutoBalancerListener@885827599 to 0 since there are no snapshots (org.apache.kafka.raft.KafkaRaftClient)
[2025-08-08 14:51:46,440] INFO [ControllerServer id=1] Waiting for the controller metadata publishers to be installed (kafka.server.ControllerServer)
[2025-08-08 14:51:46,440] INFO [ControllerServer id=1] Finished waiting for the controller metadata publishers to be installed (kafka.server.ControllerServer)
[2025-08-08 14:51:46,440] INFO [SocketServer listenerType=CONTROLLER, nodeId=1] Enabling request processing. (kafka.network.SocketServer)
[2025-08-08 14:51:46,445] INFO Awaiting socket connections on 0.0.0.0:9093. (kafka.network.DataPlaneAcceptor)
[2025-08-08 14:51:46,463] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing KRaftMetadataCachePublisher with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,464] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing FeaturesPublisher with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,465] INFO [controller-1-to-controller-registration-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,466] INFO [ControllerServer id=1] Waiting for all of the authorizer futures to be completed (kafka.server.ControllerServer)
[2025-08-08 14:51:46,466] INFO [ControllerServer id=1] Finished waiting for all of the authorizer futures to be completed (kafka.server.ControllerServer)
[2025-08-08 14:51:46,466] INFO [ControllerServer id=1] Waiting for all of the SocketServer Acceptors to be started (kafka.server.ControllerServer)
[2025-08-08 14:51:46,466] INFO [ControllerRegistrationManager id=1 incarnation=7DKNPsETS--9ZsGGpmAV8w] initialized channel manager. (kafka.server.ControllerRegistrationManager)
[2025-08-08 14:51:46,466] INFO [ControllerServer id=1] Finished waiting for all of the SocketServer Acceptors to be started (kafka.server.ControllerServer)
[2025-08-08 14:51:46,467] INFO [ControllerRegistrationManager id=1 incarnation=7DKNPsETS--9ZsGGpmAV8w] maybeSendControllerRegistration: cannot register yet because the metadata.version is still 3.0-IV1, which does not support KIP-919 controller registration. (kafka.server.ControllerRegistrationManager)
[2025-08-08 14:51:46,467] INFO [controller-1-to-controller-registration-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,468] INFO [BrokerServer id=1] Transition from SHUTDOWN to STARTING (kafka.server.BrokerServer)
[2025-08-08 14:51:46,468] INFO [ControllerServer id=1] Loaded new metadata Features(metadataVersion=3.8-IV0, finalizedFeatures={automq.version=3, metadata.version=20}, finalizedFeaturesEpoch=5). (org.apache.kafka.metadata.publisher.FeaturesPublisher)
[2025-08-08 14:51:46,468] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing ControllerRegistrationsPublisher with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,468] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing ControllerRegistrationManager with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,471] INFO [BrokerServer id=1] Starting broker (kafka.server.BrokerServer)
[2025-08-08 14:51:46,471] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing DynamicConfigPublisher controller id=1 with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,472] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing DynamicClientQuotaPublisher controller id=1 with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,480] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing ScramPublisher controller id=1 with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,486] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing DelegationTokenPublisher controller id=1 with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,488] INFO [ControllerRegistrationManager id=1 incarnation=7DKNPsETS--9ZsGGpmAV8w] sendControllerRegistration: attempting to send ControllerRegistrationRequestData(controllerId=1, incarnationId=7DKNPsETS--9ZsGGpmAV8w, zkMigrationReady=false, listeners=[Listener(name='CONTROLLER', host='localhost', port=9093, securityProtocol=0)], features=[Feature(name='automq.version', minSupportedVersion=1, maxSupportedVersion=3), Feature(name='metadata.version', minSupportedVersion=1, maxSupportedVersion=20)]) (kafka.server.ControllerRegistrationManager)
[2025-08-08 14:51:46,489] INFO [broker-1-ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,489] INFO [broker-1-ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,490] INFO [broker-1-ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,490] INFO [broker-1-ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,490] INFO [broker-1-ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)
[2025-08-08 14:51:46,494] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing ControllerMetadataMetricsPublisher with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,497] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing AclPublisher controller id=1 with a snapshot at offset 5 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:46,559] WARN Error while loading kafka-version.properties: inStream parameter is null (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:46,559] INFO [BrokerServer id=1] Waiting for controller quorum voters future (kafka.server.BrokerServer)
[2025-08-08 14:51:46,560] INFO [BrokerServer id=1] Finished waiting for controller quorum voters future (kafka.server.BrokerServer)
[2025-08-08 14:51:46,566] INFO [broker-1-to-controller-forwarding-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,566] INFO [broker-1-to-controller-forwarding-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,594] INFO [client-metrics-reaper]: Starting (org.apache.kafka.server.util.timer.SystemTimerReaper$Reaper)
[2025-08-08 14:51:46,687] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)
[2025-08-08 14:51:46,717] INFO [SocketServer listenerType=BROKER, nodeId=1] Created data-plane acceptor and processors for endpoint : ListenerName(PLAINTEXT) (kafka.network.SocketServer)
[2025-08-08 14:51:46,742] INFO [broker-1-to-controller-alter-partition-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,743] INFO [broker-1-to-controller-alter-partition-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,785] INFO [broker-1-to-controller-directory-assignments-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,786] INFO [broker-1-to-controller-directory-assignments-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:46,820] INFO [ExpirationReaper-1-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,821] INFO [ExpirationReaper-1-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,822] INFO [ExpirationReaper-1-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,822] INFO [ExpirationReaper-1-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,825] INFO [ExpirationReaper-1-RemoteFetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,987] INFO [ExpirationReaper-1-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,988] INFO [ExpirationReaper-1-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:46,994] INFO [ControllerRegistrationManager id=1 incarnation=7DKNPsETS--9ZsGGpmAV8w] Our registration has been persisted to the metadata log. (kafka.server.ControllerRegistrationManager)
[2025-08-08 14:51:46,999] INFO [ControllerRegistrationManager id=1 incarnation=7DKNPsETS--9ZsGGpmAV8w] RegistrationResponseHandler: controller acknowledged ControllerRegistrationRequest. (kafka.server.ControllerRegistrationManager)
[2025-08-08 14:51:47,106] INFO [broker-1-to-controller-heartbeat-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:47,107] INFO [broker-1-to-controller-heartbeat-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:47,119] INFO [BrokerLifecycleManager id=1] Incarnation t0_2E_BBR6OXJFw8F6GRDw of broker 1 in cluster z18IbZOMQmiiP7KGqqRwrg is now STARTING. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:47,161] INFO [ExpirationReaper-1-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2025-08-08 14:51:47,194] INFO [BrokerLifecycleManager id=1] Successfully registered broker 1 with broker epoch 8 (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:47,232] INFO [BrokerLifecycleManager id=1] The broker has caught up. Transitioning from STARTING to RECOVERY. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:47,261] INFO [BrokerLifecycleManager id=1] The broker is in RECOVERY. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:47,572] INFO initializing Kafka metrics collector (org.apache.kafka.common.telemetry.internals.KafkaMetricsCollector)
[2025-08-08 14:51:47,711] INFO Kafka version: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:47,711] INFO Kafka commitId: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:47,711] INFO Kafka startTimeMs: 1754635907702 (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:47,750] INFO [BrokerServer id=1] Waiting for the broker metadata publishers to be installed (kafka.server.BrokerServer)
[2025-08-08 14:51:47,750] INFO [BrokerServer id=1] Finished waiting for the broker metadata publishers to be installed (kafka.server.BrokerServer)
[2025-08-08 14:51:47,750] INFO [BrokerServer id=1] Waiting for the controller to acknowledge that we are caught up (kafka.server.BrokerServer)
[2025-08-08 14:51:47,750] INFO [BrokerServer id=1] Finished waiting for the controller to acknowledge that we are caught up (kafka.server.BrokerServer)
[2025-08-08 14:51:47,751] INFO [BrokerServer id=1] Waiting for the initial broker metadata update to be published (kafka.server.BrokerServer)
[2025-08-08 14:51:47,752] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing MetadataVersionPublisher(id=1) with a snapshot at offset 9 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:47,752] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing BrokerMetadataPublisher with a snapshot at offset 9 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:47,755] INFO [BrokerMetadataPublisher id=1] Publishing initial metadata at offset OffsetAndEpoch(offset=9, epoch=1) with metadata.version 3.8-IV0. (kafka.server.metadata.BrokerMetadataPublisher)
[2025-08-08 14:51:47,950] INFO [AddPartitionsToTxnSenderThread-1]: Starting (kafka.server.AddPartitionsToTxnManager)
[2025-08-08 14:51:47,950] INFO [LogDirFailureHandler]: Starting (kafka.server.streamaspect.ElasticReplicaManager$ElasticLogDirFailureHandler)
[2025-08-08 14:51:47,951] INFO [GroupCoordinator 1]: Starting up. (kafka.coordinator.group.GroupCoordinator)
[2025-08-08 14:51:47,964] INFO [GroupCoordinator 1]: Startup complete. (kafka.coordinator.group.GroupCoordinator)
[2025-08-08 14:51:47,964] INFO [TransactionCoordinator id=1] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)
[2025-08-08 14:51:47,966] INFO [TransactionCoordinator id=1] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)
[2025-08-08 14:51:47,966] INFO [TxnMarkerSenderThread-1]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)
[2025-08-08 14:51:47,983] INFO [BrokerServer id=1] Finished waiting for the initial broker metadata update to be published (kafka.server.BrokerServer)
[2025-08-08 14:51:47,983] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing BrokerRegistrationTracker(id=1) with a snapshot at offset 9 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:47,987] INFO KafkaConfig values: 
	advertised.listeners = PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
	alter.config.policy.class.name = null
	alter.log.dirs.replication.quota.window.num = 11
	alter.log.dirs.replication.quota.window.size.seconds = 1
	authorizer.class.name = 
	auto.create.topics.enable = true
	auto.include.jmx.reporter = true
	auto.leader.rebalance.enable = true
	autobalancer.controller.anomaly.detect.interval.ms = 60000
	autobalancer.controller.consumer.client.id = auto_balancer_controller_consumer_
	autobalancer.controller.consumer.poll.timeout = 1000
	autobalancer.controller.enable = true
	autobalancer.controller.exclude.broker.ids = []
	autobalancer.controller.exclude.topics = []
	autobalancer.controller.execution.concurrency = 50
	autobalancer.controller.execution.interval.ms = 5000
	autobalancer.controller.goals = [kafka.autobalancer.goals.NetworkInUsageDistributionGoal, kafka.autobalancer.goals.NetworkOutUsageDistributionGoal]
	autobalancer.controller.metrics.delay.ms = 60000
	autobalancer.controller.network.in.distribution.detect.avg.deviation = 0.1
	autobalancer.controller.network.in.trivial.change.ratio = 0.05
	autobalancer.controller.network.in.usage.distribution.detect.threshold = 1048576
	autobalancer.controller.network.out.distribution.detect.avg.deviation = 0.1
	autobalancer.controller.network.out.trivial.change.ratio = 0.05
	autobalancer.controller.network.out.usage.distribution.detect.threshold = 1048576
	autobalancer.controller.retry.backoff.ms = 1000
	autobalancer.controller.topic.num.partitions = 1
	autobalancer.controller.topic.retention.ms = 1800000
	autobalancer.reporter.batch.size = 800000
	autobalancer.reporter.client.id = auto_balancer_metrics_reporter_producer
	autobalancer.reporter.linger.ms = 1000
	autobalancer.reporter.metrics.reporting.interval.ms = 10000
	autobalancer.reporter.producer.create.retries = 2
	automq.backpressure.cooldown.ms = 15000
	automq.backpressure.enabled = true
	automq.table.topic.namespace = null
	automq.table.topic.schema.registry.url = null
	automq.zonerouter.channels = null
	background.threads = 10
	broker.heartbeat.interval.ms = 2000
	broker.id = 1
	broker.id.generation.enable = true
	broker.rack = null
	broker.session.timeout.ms = 9000
	client.quota.callback.class = null
	compression.gzip.level = -1
	compression.lz4.level = 9
	compression.type = producer
	compression.zstd.level = 3
	connection.failed.authentication.delay.ms = 100
	connections.max.idle.ms = 600000
	connections.max.reauth.ms = 0
	control.plane.listener.name = null
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.listener.names = CONTROLLER
	controller.quorum.append.linger.ms = 1
	controller.quorum.bootstrap.servers = []
	controller.quorum.election.backoff.max.ms = 1000
	controller.quorum.election.timeout.ms = 1000
	controller.quorum.fetch.timeout.ms = 5000
	controller.quorum.request.timeout.ms = 5000
	controller.quorum.retry.backoff.ms = 20
	controller.quorum.voters = [1@localhost:9093]
	controller.quota.window.num = 11
	controller.quota.window.size.seconds = 1
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delegation.token.expiry.check.interval.ms = 3600000
	delegation.token.expiry.time.ms = 86400000
	delegation.token.master.key = null
	delegation.token.max.lifetime.ms = 604800000
	delegation.token.secret.key = null
	delete.records.purgatory.purge.interval.requests = 1
	delete.topic.enable = true
	early.start.listeners = null
	elasticstream.enable = true
	elasticstream.endpoint = s3://
	eligible.leader.replicas.enable = false
	fetch.max.bytes = 57671680
	fetch.purgatory.purge.interval.requests = 1000
	group.consumer.assignors = [org.apache.kafka.coordinator.group.assignor.UniformAssignor, org.apache.kafka.coordinator.group.assignor.RangeAssignor]
	group.consumer.heartbeat.interval.ms = 5000
	group.consumer.max.heartbeat.interval.ms = 15000
	group.consumer.max.session.timeout.ms = 60000
	group.consumer.max.size = 2147483647
	group.consumer.migration.policy = disabled
	group.consumer.min.heartbeat.interval.ms = 5000
	group.consumer.min.session.timeout.ms = 45000
	group.consumer.session.timeout.ms = 45000
	group.coordinator.append.linger.ms = 10
	group.coordinator.new.enable = false
	group.coordinator.rebalance.protocols = [classic]
	group.coordinator.threads = 1
	group.initial.rebalance.delay.ms = 3000
	group.max.session.timeout.ms = 1800000
	group.max.size = 2147483647
	group.min.session.timeout.ms = 6000
	group.share.delivery.count.limit = 5
	group.share.enable = false
	group.share.heartbeat.interval.ms = 5000
	group.share.max.groups = 10
	group.share.max.heartbeat.interval.ms = 15000
	group.share.max.record.lock.duration.ms = 60000
	group.share.max.session.timeout.ms = 60000
	group.share.max.size = 200
	group.share.min.heartbeat.interval.ms = 5000
	group.share.min.record.lock.duration.ms = 15000
	group.share.min.session.timeout.ms = 45000
	group.share.partition.max.record.locks = 200
	group.share.record.lock.duration.ms = 30000
	group.share.session.timeout.ms = 45000
	initial.broker.registration.timeout.ms = 60000
	inter.broker.listener.name = PLAINTEXT
	inter.broker.protocol.version = 3.8-IV0
	kafka.metrics.polling.interval.secs = 10
	kafka.metrics.reporters = []
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
	listeners = PLAINTEXT://:9092,CONTROLLER://:9093
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.max.compaction.lag.ms = 9223372036854775807
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dir.failure.timeout.ms = 30000
	log.dirs = D:/workspace_java/nicolchen/automq/kraft-combined-logs-idc-a
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.flush.start.offset.checkpoint.interval.ms = 60000
	log.index.interval.bytes = 1048576
	log.index.size.max.bytes = 10485760
	log.initial.task.delay.ms = 30000
	log.local.retention.bytes = -2
	log.local.retention.ms = -2
	log.message.downconversion.enable = true
	log.message.format.version = 3.0-IV1
	log.message.timestamp.after.max.ms = 9223372036854775807
	log.message.timestamp.before.max.ms = 9223372036854775807
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connection.creation.rate = 2147483647
	max.connections = 2147483647
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	max.incremental.fetch.session.cache.slots = 1000
	max.request.partition.size.limit = 2000
	message.max.bytes = 1048588
	metadata.log.dir = null
	metadata.log.max.record.bytes.between.snapshots = 20971520
	metadata.log.max.snapshot.interval.ms = 3600000
	metadata.log.segment.bytes = 1073741824
	metadata.log.segment.min.bytes = 8388608
	metadata.log.segment.ms = 604800000
	metadata.max.idle.interval.ms = 500
	metadata.max.retention.bytes = 104857600
	metadata.max.retention.ms = 604800000
	metric.reporters = [kafka.autobalancer.metricsreporter.AutoBalancerMetricsReporter]
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 1
	node.id = 1
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.alter.log.dirs.threads = null
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 10080
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 1
	offsets.topic.segment.bytes = 104857600
	password.encoder.cipher.algorithm = AES/CBC/PKCS5Padding
	password.encoder.iterations = 4096
	password.encoder.key.length = 128
	password.encoder.keyfactory.algorithm = null
	password.encoder.old.secret = null
	password.encoder.secret = null
	principal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder
	process.roles = [broker, controller]
	producer.id.expiration.check.interval.ms = 600000
	producer.id.expiration.ms = 86400000
	producer.purgatory.purge.interval.requests = 1000
	queued.max.request.bytes = -1
	queued.max.requests = 500
	queued.max.requests.size.bytes = 104857600
	quota.window.num = 11
	quota.window.size.seconds = 1
	remote.fetch.max.wait.ms = 500
	remote.log.index.file.cache.total.size.bytes = 1073741824
	remote.log.manager.copier.thread.pool.size = 10
	remote.log.manager.copy.max.bytes.per.second = 9223372036854775807
	remote.log.manager.copy.quota.window.num = 11
	remote.log.manager.copy.quota.window.size.seconds = 1
	remote.log.manager.expiration.thread.pool.size = 10
	remote.log.manager.fetch.max.bytes.per.second = 9223372036854775807
	remote.log.manager.fetch.quota.window.num = 11
	remote.log.manager.fetch.quota.window.size.seconds = 1
	remote.log.manager.task.interval.ms = 30000
	remote.log.manager.task.retry.backoff.max.ms = 30000
	remote.log.manager.task.retry.backoff.ms = 500
	remote.log.manager.task.retry.jitter = 0.2
	remote.log.manager.thread.pool.size = 10
	remote.log.metadata.custom.metadata.max.bytes = 128
	remote.log.metadata.manager.class.name = org.apache.kafka.server.log.remote.metadata.storage.TopicBasedRemoteLogMetadataManager
	remote.log.metadata.manager.class.path = null
	remote.log.metadata.manager.impl.prefix = rlmm.config.
	remote.log.metadata.manager.listener.name = null
	remote.log.reader.max.pending.tasks = 100
	remote.log.reader.threads = 10
	remote.log.storage.manager.class.name = null
	remote.log.storage.manager.class.path = null
	remote.log.storage.manager.impl.prefix = rsm.config.
	remote.log.storage.system.enable = false
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 30000
	replica.selector.class = null
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	s3.block.cache.size = -1
	s3.bucket = null
	s3.controller.request.retry.base.delay.ms = 500
	s3.controller.request.retry.max.count = 2147483647
	s3.data.buckets = 0@s3://automq-data?region=us-east-1&endpoint=http://10.65.80.149:9004,1@s3://automq-data?region=us-east-1&endpoint=http://10.65.80.149:9002,2@s3://automq-data?region=us-east-1&endpoint=http://10.65.80.149:9000
	s3.endpoint = null
	s3.max.stream.num.per.stream.set.object = 20000
	s3.max.stream.object.num.per.commit = 10000
	s3.metrics.exporter.prom.host = localhost
	s3.metrics.exporter.prom.port = 9090
	s3.mock.enable = false
	s3.network.baseline.bandwidth = 104857600
	s3.network.refill.period.ms = 10
	s3.object.block.size = 524288
	s3.object.delete.retention.minutes = 1
	s3.object.part.size = 16777216
	s3.ops.bucket = null
	s3.ops.buckets = 0@s3://automq-ops?region=us-east-1&endpoint=http://10.65.80.149:9004,1@s3://automq-ops?region=us-east-1&endpoint=http://10.65.80.149:9002,2@s3://automq-ops?region=us-east-1&endpoint=http://10.65.80.149:9000
	s3.path.style = false
	s3.region = null
	s3.stream.allocator.policy = POOLED_HEAP
	s3.stream.object.compaction.interval.minutes = 30
	s3.stream.object.compaction.max.size.bytes = 10737418240
	s3.stream.object.split.size = 8388608
	s3.stream.set.object.compaction.cache.size = 209715200
	s3.stream.set.object.compaction.force.split.minutes = 120
	s3.stream.set.object.compaction.interval.minutes = 10
	s3.stream.set.object.compaction.max.num = 500
	s3.stream.set.object.compaction.stream.split.size = 8388608
	s3.telemetry.exporter.otlp.compression.enable = false
	s3.telemetry.exporter.otlp.endpoint = null
	s3.telemetry.exporter.otlp.protocol = grpc
	s3.telemetry.exporter.report.interval.ms = 30000
	s3.telemetry.metrics.base.labels = null
	s3.telemetry.metrics.enable = true
	s3.telemetry.metrics.exporter.type = null
	s3.telemetry.metrics.exporter.uri = null
	s3.telemetry.metrics.level = INFO
	s3.telemetry.ops.enabled = true
	s3.wal.cache.size = -1
	s3.wal.capacity = 2147483648
	s3.wal.iops = 3000
	s3.wal.path = 0@s3://automq-wal?region=us-east-1&endpoint=http://10.65.80.149:9004,1@s3://automq-wal?region=us-east-1&endpoint=http://10.65.80.149:9002,2@s3://automq-wal?region=us-east-1&endpoint=http://10.65.80.149:9000
	s3.wal.thread = 8
	s3.wal.upload.interval.ms = -1
	s3.wal.upload.threshold = 524288
	sasl.client.callback.handler.class = null
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism.controller.protocol = GSSAPI
	sasl.mechanism.inter.broker.protocol = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	sasl.server.callback.handler.class = null
	sasl.server.max.receive.size = 524288
	security.inter.broker.protocol = PLAINTEXT
	security.providers = null
	server.max.startup.time.ms = 9223372036854775807
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	socket.listen.backlog.size = 50
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.allow.dn.changes = false
	ssl.allow.san.changes = false
	ssl.cipher.suites = []
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.principal.mapping.rules = DEFAULT
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	telemetry.max.bytes = 1048576
	transaction.abort.timed.out.transaction.cleanup.interval.ms = 10000
	transaction.max.timeout.ms = 900000
	transaction.partition.verification.enable = true
	transaction.remove.expired.transaction.cleanup.interval.ms = 3600000
	transaction.state.log.load.buffer.size = 5242880
	transaction.state.log.min.isr = 1
	transaction.state.log.num.partitions = 50
	transaction.state.log.replication.factor = 1
	transaction.state.log.segment.bytes = 104857600
	transactional.id.expiration.ms = 604800000
	unclean.leader.election.enable = false
	unstable.api.versions.enable = false
	unstable.feature.versions.enable = false
	zookeeper.clientCnxnSocket = null
	zookeeper.connect = null
	zookeeper.connection.timeout.ms = null
	zookeeper.max.in.flight.requests = 10
	zookeeper.metadata.migration.enable = false
	zookeeper.metadata.migration.min.batch.size = 200
	zookeeper.session.timeout.ms = 18000
	zookeeper.set.acl = false
	zookeeper.ssl.cipher.suites = null
	zookeeper.ssl.client.enable = false
	zookeeper.ssl.crl.enable = false
	zookeeper.ssl.enabled.protocols = null
	zookeeper.ssl.endpoint.identification.algorithm = HTTPS
	zookeeper.ssl.keystore.location = null
	zookeeper.ssl.keystore.password = null
	zookeeper.ssl.keystore.type = null
	zookeeper.ssl.ocsp.enable = false
	zookeeper.ssl.protocol = TLSv1.2
	zookeeper.ssl.truststore.location = null
	zookeeper.ssl.truststore.password = null
	zookeeper.ssl.truststore.type = null
 (kafka.server.KafkaConfig)
[2025-08-08 14:51:47,993] INFO s3.wal.cache.size is not set, using 178956970 as the default value (kafka.server.KafkaConfig)
[2025-08-08 14:51:47,995] INFO s3.block.cache.size is not set, using 89478485 as the default value (kafka.server.KafkaConfig)
[2025-08-08 14:51:48,127] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing StreamMetadataManager with a snapshot at offset 10 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:48,136] INFO [broker-1-to-controller-s3stream-to-controller-channel-manager]: Starting (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:48,136] INFO [broker-1-to-controller-s3stream-to-controller-channel-manager]: Recorded new KRaft controller, from now on will use node localhost:9093 (id: 1 rack: null) (kafka.server.NodeToControllerRequestThread)
[2025-08-08 14:51:48,257] INFO Start readiness check for BucketURL{bucketId=0, protocol='s3', bucket='automq-data', region='us-east-1', endpoint='http://10.65.80.149:9004', extension={} (ObjectStorageReadinessCheck)
[2025-08-08 14:51:49,270] INFO [BrokerLifecycleManager id=1] The broker is in RECOVERY. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:51,262] INFO Readiness check pass! (ObjectStorageReadinessCheck)
[2025-08-08 14:51:51,263] INFO Start readiness check for BucketURL{bucketId=1, protocol='s3', bucket='automq-data', region='us-east-1', endpoint='http://10.65.80.149:9002', extension={} (ObjectStorageReadinessCheck)
[2025-08-08 14:51:51,278] INFO [BrokerLifecycleManager id=1] The broker is in RECOVERY. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:51,408] INFO Readiness check pass! (ObjectStorageReadinessCheck)
[2025-08-08 14:51:52,364] INFO [BrokerServer id=1] Waiting for the broker to be unfenced (kafka.server.BrokerServer)
[2025-08-08 14:51:52,406] INFO [BrokerLifecycleManager id=1] The broker has been unfenced. Transitioning from RECOVERY to RUNNING. (kafka.server.BrokerLifecycleManager)
[2025-08-08 14:51:52,406] INFO [BrokerServer id=1] Finished waiting for the broker to be unfenced (kafka.server.BrokerServer)
[2025-08-08 14:51:52,407] INFO authorizerStart completed for endpoint PLAINTEXT. Endpoint is now READY. (org.apache.kafka.server.network.EndpointReadyFutures)
[2025-08-08 14:51:52,407] INFO [SocketServer listenerType=BROKER, nodeId=1] Enabling request processing. (kafka.network.SocketServer)
[2025-08-08 14:51:52,409] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.DataPlaneAcceptor)
[2025-08-08 14:51:52,410] INFO [BrokerServer id=1] Waiting for all of the authorizer futures to be completed (kafka.server.BrokerServer)
[2025-08-08 14:51:52,410] INFO [BrokerServer id=1] Finished waiting for all of the authorizer futures to be completed (kafka.server.BrokerServer)
[2025-08-08 14:51:52,410] INFO [BrokerServer id=1] Waiting for all of the SocketServer Acceptors to be started (kafka.server.BrokerServer)
[2025-08-08 14:51:52,410] INFO [BrokerServer id=1] Finished waiting for all of the SocketServer Acceptors to be started (kafka.server.BrokerServer)
[2025-08-08 14:51:52,410] INFO [BrokerServer id=1] Transition from STARTING to STARTED (kafka.server.BrokerServer)
[2025-08-08 14:51:52,411] INFO Kafka version: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,411] INFO Kafka commitId: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,411] INFO Kafka startTimeMs: 1754635912411 (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,411] INFO [KafkaRaftServer nodeId=1] Kafka Server started (kafka.server.KafkaRaftServer)
[2025-08-08 14:51:52,484] INFO [MetadataLoader id=1] InitializeNewPublishers: initializing failover-listener with a snapshot at offset 20 (org.apache.kafka.image.loader.MetadataLoader)
[2025-08-08 14:51:52,490] INFO initializing Kafka metrics collector (org.apache.kafka.common.telemetry.internals.KafkaMetricsCollector)
[2025-08-08 14:51:52,582] INFO Kafka version: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,582] INFO Kafka commitId: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,582] INFO Kafka startTimeMs: 1754635912582 (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,638] INFO Sent auto-creation request for Set(__auto_balancer_metrics) to the active controller. (kafka.server.DefaultAutoTopicCreationManager)
[2025-08-08 14:51:52,758] INFO Metrics scheduler closed (org.apache.kafka.common.metrics.Metrics)
[2025-08-08 14:51:52,758] INFO Closing reporter org.apache.kafka.common.metrics.JmxReporter (org.apache.kafka.common.metrics.Metrics)
[2025-08-08 14:51:52,758] INFO Closing reporter org.apache.kafka.common.telemetry.internals.ClientTelemetryReporter (org.apache.kafka.common.metrics.Metrics)
[2025-08-08 14:51:52,758] INFO Metrics reporters closed (org.apache.kafka.common.metrics.Metrics)
[2025-08-08 14:51:52,765] INFO App info kafka.consumer for __automq_client_auto_balancer_controller_consumer_6393304439985055666 unregistered (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:52,768] INFO [ReplicaFetcherManager on broker 1] Removed fetcher for partitions Set(__auto_balancer_metrics-0) (kafka.server.ReplicaFetcherManager)
[2025-08-08 14:51:52,778] INFO [DynamicConfigPublisher broker id=1] Updating topic __auto_balancer_metrics with new configuration : cleanup.policy -> delete,min.insync.replicas -> 1,retention.ms -> 1800000 (kafka.server.metadata.DynamicConfigPublisher)
[2025-08-08 14:51:53,764] INFO [Partition __auto_balancer_metrics-0 broker=1] Log loaded for partition __auto_balancer_metrics-0 with initial high watermark 0 (kafka.cluster.Partition)
[2025-08-08 14:51:53,774] INFO initializing Kafka metrics collector (org.apache.kafka.common.telemetry.internals.KafkaMetricsCollector)
[2025-08-08 14:51:53,780] INFO Kafka version: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:53,780] INFO Kafka commitId: unknown (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:53,780] INFO Kafka startTimeMs: 1754635913780 (org.apache.kafka.common.utils.AppInfoParser)
[2025-08-08 14:51:54,056] INFO [ReplicaManager broker=1] open 0 / make leader 1 / close 0 partitions cost 1299ms (kafka.server.streamaspect.ElasticReplicaManager)
[2025-08-08 14:51:57,822] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1643)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 6 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)

[2025-08-08 14:51:57,823] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1643)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,823] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:100)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.ElasticLogSegmentManager.asyncPersistLogMeta(ElasticLogSegmentManager.java:144)
	kafka.log.streamaspect.ElasticLogSegmentManager.create(ElasticLogSegmentManager.java:95)
	kafka.log.streamaspect.ElasticLog$.kafka$log$streamaspect$ElasticLog$$createAndSaveSegment(ElasticLog.scala:918)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLog$.$anonfun$apply$17$adapted(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticLogLoader.createAndAddToSegments(ElasticLogLoader.scala:214)
	kafka.log.streamaspect.ElasticLogLoader.recoverLog(ElasticLogLoader.scala:194)
	kafka.log.streamaspect.ElasticLogLoader.load(ElasticLogLoader.scala:77)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:768)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,824] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,825] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:100)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog.saveLeaderEpochCheckpoint(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$5(ElasticUnifiedLog.scala:353)
	kafka.log.streamaspect.ElasticLeaderEpochCheckpoint.write(ElasticLeaderEpochCheckpoint.java:45)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.writeToFile(LeaderEpochFileCache.java:522)
	org.apache.kafka.storage.internals.epoch.LeaderEpochFileCache.assign(LeaderEpochFileCache.java:109)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1(UnifiedLog.scala:951)
	kafka.log.UnifiedLog.$anonfun$maybeAssignEpochStartOffset$1$adapted(UnifiedLog.scala:950)
	scala.Option.foreach(Option.scala:437)
	kafka.log.UnifiedLog.maybeAssignEpochStartOffset(UnifiedLog.scala:950)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:899)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,827] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.slice(AdvancedLeakAwareByteBuf.java:83)
	com.automq.stream.s3.wal.util.WALUtil.crc32(WALUtil.java:84)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:100)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,828] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:146)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,829] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,829] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,829] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,830] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 7 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,831] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:144)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,831] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.wal.util.WALUtil.crc32(WALUtil.java:85)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	com.automq.stream.api.Stream.append(Stream.java:68)
	kafka.log.streamaspect.MetaStream.append0(MetaStream.java:159)
	kafka.log.streamaspect.MetaStream.append(MetaStream.java:132)
	kafka.log.streamaspect.MetaStream.appendSync(MetaStream.java:140)
	kafka.log.streamaspect.ElasticLog$.apply(ElasticLog.scala:897)
	kafka.log.streamaspect.ElasticUnifiedLog$.$anonfun$apply$2(ElasticUnifiedLog.scala:341)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.streamaspect.ElasticUnifiedLog$.apply(ElasticUnifiedLog.scala:334)
	kafka.log.streamaspect.ElasticLogManager.createLog(ElasticLogManager.scala:83)
	kafka.log.streamaspect.ElasticLogManager$.createLog(ElasticLogManager.scala:207)
	kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:1127)
	scala.Option.getOrElse(Option.scala:201)
	kafka.log.LogManager.getOrCreateLog(LogManager.scala:1081)
	kafka.cluster.Partition.createLog(Partition.scala:529)
	kafka.cluster.Partition.maybeCreate$1(Partition.scala:503)
	kafka.cluster.Partition.createLogIfNotExists(Partition.scala:510)
	kafka.cluster.Partition.createLogInAssignedDirectoryId(Partition.scala:1010)
	kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:873)
	kafka.cluster.Partition.makeLeader(Partition.scala:829)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$3(ElasticReplicaManager.scala:1291)
	kafka.server.streamaspect.ElasticReplicaManager.getOrCreatePartitionV2(ElasticReplicaManager.scala:1061)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2(ElasticReplicaManager.scala:1288)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$applyLocalLeadersDelta$2$adapted(ElasticReplicaManager.scala:1287)
	kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:648)
	scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:514)
	kafka.server.streamaspect.ElasticReplicaManager.applyLocalLeadersDelta(ElasticReplicaManager.scala:1287)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$asyncApplyDelta$12(ElasticReplicaManager.scala:1204)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,832] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 4 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,832] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 4 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,832] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:146)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:145)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,833] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 6 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:51:57,949] INFO [KafkaApi-1] produce cost (in microseconds), produce={count=1, max=74774.0, mean=74774.0} callback={count=1, max=161277.0, mean=161277.0} ack={count=1, max=7110.0, mean=7110.0} (kafka.server.streamaspect.ElasticKafkaApis)
[2025-08-08 14:52:16,787] INFO Created Gauge for kafka.server.connection.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,788] INFO Created Gauge for kafka.server.connection.creation.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,788] INFO Created Counter for kafka.io.threads.idle.time (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,788] INFO Created Gauge for kafka.io.threads.idle.rate.1m (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,788] INFO Created Gauge for kafka.server.kraft.current.leader (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,788] INFO Created Gauge for kafka.server.kraft.current.epoch (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,789] INFO Created Gauge for kafka.server.kraft.high.watermark (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,789] INFO Created Gauge for kafka.server.kraft.log.end.offset (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,789] INFO Created Gauge for kafka.server.kraft.log.end.epoch (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,789] INFO Created Gauge for kafka.server.kraft.commit.latency.avg (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,789] INFO Created Gauge for kafka.server.kraft.commit.latency.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Gauge for kafka.server.kraft.fetch.records.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Gauge for kafka.server.kraft.append.records.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Gauge for kafka.server.kraft.poll.idle.ratio.avg (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Counter for kafka.message.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Counter for kafka.network.io (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,790] INFO Created Counter for kafka.network.io (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,791] INFO Created Counter for kafka.topic.request.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,791] INFO Created Counter for kafka.topic.request.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,792] INFO Created Counter for kafka.request.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,793] INFO Created Counter for kafka.request.error.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,809] INFO Created Gauge for kafka.purgatory.size (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,809] INFO Created Gauge for kafka.partition.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,815] INFO Created Gauge for kafka.reassign.partition.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,816] INFO Created Gauge for kafka.group.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,816] INFO Created Gauge for kafka.group.preparing.rebalance.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,816] INFO Created Gauge for kafka.group.completing.rebalance.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,817] INFO Created Gauge for kafka.group.stable.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,817] INFO Created Gauge for kafka.group.dead.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,817] INFO Created Gauge for kafka.group.empty.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,817] INFO Created Gauge for kafka.broker.connection.accept.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.listener.connection.accept.rate (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.listener.connection.accept.throttle.time (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.controller.active.count (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Counter for kafka.event.queue.time (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.event.queue.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.event.queue.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Gauge for kafka.event.queue.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,818] INFO Created Counter for kafka.event.queue.processing.time (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,819] INFO Created Gauge for kafka.event.queue.processing.time.50p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,819] INFO Created Gauge for kafka.event.queue.processing.time.99p (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:16,819] INFO Created Gauge for kafka.event.queue.processing.time.max (io.opentelemetry.instrumentation.jmx.engine.MetricRegistrar)
[2025-08-08 14:52:18,103] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:147)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:146)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:145)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#7:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,105] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because they were duplicates
: 4 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,106] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because they were duplicates
: 4 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,106] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:145)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:144)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,106] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 6 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,107] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 4 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,107] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.slice(AdvancedLeakAwareByteBuf.java:83)
	com.automq.stream.s3.wal.util.WALUtil.crc32(WALUtil.java:84)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,108] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:100)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:18,109] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 7 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,404] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.wal.util.WALUtil.crc32(WALUtil.java:85)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,406] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponents0(CompositeByteBuf.java:399)
	io.netty.buffer.CompositeByteBuf.addComponents(CompositeByteBuf.java:236)
	io.netty.buffer.WrappedCompositeByteBuf.addComponents(WrappedCompositeByteBuf.java:550)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:927)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.wal.util.WALUtil.crc32(WALUtil.java:85)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:107)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:99)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:98)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.common.RecordHeader.marshalHeaderExceptCRC(RecordHeader.java:97)
	com.automq.stream.s3.wal.common.RecordHeader.marshal(RecordHeader.java:106)
	com.automq.stream.s3.wal.util.WALUtil.generateRecord(WALUtil.java:55)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:116)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.SimpleLeakAwareByteBuf.unwrappedDerived(SimpleLeakAwareByteBuf.java:144)
	io.netty.buffer.SimpleLeakAwareByteBuf.retainedSlice(SimpleLeakAwareByteBuf.java:57)
	io.netty.buffer.AdvancedLeakAwareByteBuf.retainedSlice(AdvancedLeakAwareByteBuf.java:96)
	com.automq.stream.ByteBufSeqAlloc$HugeBuf.byteBuffer(ByteBufSeqAlloc.java:82)
	com.automq.stream.ByteBufSeqAlloc.byteBuffer(ByteBufSeqAlloc.java:56)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:107)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,407] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:145)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,408] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 1 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,408] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:71)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:146)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:144)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:143)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeLong(AdvancedLeakAwareByteBuf.java:569)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:142)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareByteBuf.writeInt(AdvancedLeakAwareByteBuf.java:563)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:141)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:387)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:169)
	io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:160)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:165)
	com.automq.stream.s3.ByteBufAlloc.byteBuffer(ByteBufAlloc.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshalV1(WALObjectHeader.java:140)
	com.automq.stream.s3.wal.impl.object.WALObjectHeader.marshal(WALObjectHeader.java:120)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:38,408] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:41,195] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:492)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because they were duplicates
: 2 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:41,195] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#6:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 6 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:41,196] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.lambda$doWrite$0(QuorumAwsObjectStorage.java:59)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallMetricCollectionStage.lambda$execute$0(AsyncApiCallMetricCollectionStage.java:58)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncApiCallTimeoutTrackingStage.lambda$execute$2(AsyncApiCallTimeoutTrackingStage.java:69)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage2$RetryingExecutor.lambda$attemptExecute$1(AsyncRetryableStage2.java:128)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$execute$0(MakeAsyncHttpRequestStage.java:110)
	java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2147)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.completeResponseFuture(MakeAsyncHttpRequestStage.java:253)
	software.amazon.awssdk.core.internal.http.pipeline.stages.MakeAsyncHttpRequestStage.lambda$executeHttpRequest$3(MakeAsyncHttpRequestStage.java:167)
	java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:725)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.retainedDuplicate(AdvancedLeakAwareCompositeByteBuf.java:80)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:50)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:545)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:920)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:544)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:542)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
: 3 leak records were discarded because they were duplicates
: 3 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
[2025-08-08 14:52:58,897] INFO [KafkaApi-1] produce cost (in microseconds), produce={count=6, max=9588.0, mean=4884.5} callback={count=6, max=219750.0, mean=147484.83333333334} ack={count=6, max=559.0, mean=433.1666666666667} (kafka.server.streamaspect.ElasticKafkaApis)
[2025-08-08 14:53:08,902] ERROR LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 
#1:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:716)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.WrappedCompositeByteBuf.nioBuffers(WrappedCompositeByteBuf.java:889)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBuffers(AdvancedLeakAwareCompositeByteBuf.java:717)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1715)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#2:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:692)
	io.netty.buffer.CompositeByteBuf.nioBufferCount(CompositeByteBuf.java:1639)
	io.netty.buffer.WrappedCompositeByteBuf.nioBufferCount(WrappedCompositeByteBuf.java:874)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.nioBufferCount(AdvancedLeakAwareCompositeByteBuf.java:693)
	io.netty.buffer.CompositeByteBuf.nioBuffers(CompositeByteBuf.java:1708)
	io.netty.buffer.DuplicatedByteBuf.nioBuffers(DuplicatedByteBuf.java:397)
	io.netty.buffer.AbstractByteBuf.nioBuffers(AbstractByteBuf.java:1236)
	io.netty.buffer.WrappedByteBuf.nioBuffers(WrappedByteBuf.java:937)
	io.netty.buffer.AdvancedLeakAwareByteBuf.nioBuffers(AdvancedLeakAwareByteBuf.java:726)
	com.automq.stream.s3.operator.AwsObjectStorage.doWrite(AwsObjectStorage.java:216)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.doWrite(QuorumAwsObjectStorage.java:51)
	com.automq.stream.s3.operator.QuorumAwsObjectStorage.write(QuorumAwsObjectStorage.java:240)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:554)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#3:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:347)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#4:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.order(AdvancedLeakAwareCompositeByteBuf.java:44)
	io.netty.buffer.CompositeByteBuf.newComponent(CompositeByteBuf.java:346)
	io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:287)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:265)
	io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:222)
	io.netty.buffer.WrappedCompositeByteBuf.addComponent(WrappedCompositeByteBuf.java:544)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponent(AdvancedLeakAwareCompositeByteBuf.java:921)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:532)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.unsafeUpload(RecordAccumulator.java:483)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.lambda$start$4(RecordAccumulator.java:186)
	com.automq.stream.utils.ThreadUtils.lambda$wrapRunnable$0(ThreadUtils.java:87)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	java.base/java.util.concurrent.FutureTask.runAndReset$$$capture(FutureTask.java:305)
	java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java)
	java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	java.base/java.lang.Thread.run(Thread.java:833)
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.addComponents(AdvancedLeakAwareCompositeByteBuf.java:926)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:117)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
Created at:
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:224)
	com.automq.stream.s3.ByteBufAlloc.compositeByteBuffer(ByteBufAlloc.java:136)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.lambda$append$0(ObjectWALService.java:115)
	com.automq.stream.s3.wal.impl.object.RecordAccumulator.append(RecordAccumulator.java:375)
	com.automq.stream.s3.wal.impl.object.ObjectWALService.append(ObjectWALService.java:114)
	kafka.log.stream.s3.wal.BootstrapWalV1.append(BootstrapWalV1.java:123)
	com.automq.stream.s3.wal.WriteAheadLog.append(WriteAheadLog.java:56)
	com.automq.stream.s3.S3Storage.append0(S3Storage.java:523)
	com.automq.stream.s3.S3Storage.append(S3Storage.java:485)
	com.automq.stream.s3.S3Stream.append0(S3Stream.java:222)
	com.automq.stream.s3.S3Stream.lambda$append$2(S3Stream.java:198)
	com.automq.stream.utils.FutureUtil.exec(FutureUtil.java:87)
	com.automq.stream.s3.S3Stream.append(S3Stream.java:192)
	com.automq.stream.s3.S3StreamClient$StreamWrapper.append(S3StreamClient.java:335)
	kafka.log.streamaspect.LazyStream.append(LazyStream.java:134)
	kafka.log.streamaspect.DefaultElasticStreamSlice.append(DefaultElasticStreamSlice.java:72)
	kafka.log.streamaspect.ElasticLogFileRecords.lambda$append$4(ElasticLogFileRecords.java:220)
	com.automq.stream.s3.trace.TraceUtils.runWithSpanAsync(TraceUtils.java:99)
	kafka.log.streamaspect.ElasticLogFileRecords.append(ElasticLogFileRecords.java:219)
	kafka.log.streamaspect.ElasticLogSegment.append(ElasticLogSegment.java:240)
	kafka.log.streamaspect.ElasticLog.append(ElasticLog.scala:210)
	kafka.log.UnifiedLog.$anonfun$append$2(UnifiedLog.scala:910)
	kafka.log.LocalLog$.maybeHandleIOException(LocalLog.scala:736)
	kafka.log.UnifiedLog.maybeHandleIOException(UnifiedLog.scala:1952)
	kafka.log.UnifiedLog.append(UnifiedLog.scala:789)
	kafka.log.UnifiedLog.appendAsLeader(UnifiedLog.scala:726)
	kafka.log.streamaspect.ElasticUnifiedLog.appendAsLeader(ElasticUnifiedLog.scala:87)
	kafka.cluster.Partition.$anonfun$appendRecordsToLeader$1(Partition.scala:1537)
	kafka.cluster.Partition.appendRecordsToLeader(Partition.scala:1514)
	kafka.server.streamaspect.ElasticReplicaManager.$anonfun$appendToLocalLog$8(ElasticReplicaManager.scala:383)
	scala.collection.StrictOptimizedMapOps.map(StrictOptimizedMapOps.scala:28)
	scala.collection.StrictOptimizedMapOps.map$(StrictOptimizedMapOps.scala:27)
	scala.collection.mutable.HashMap.map(HashMap.scala:35)
	kafka.server.streamaspect.ElasticReplicaManager.appendToLocalLog(ElasticReplicaManager.scala:368)
	kafka.server.ReplicaManager.appendRecords(ReplicaManager.scala:776)
	kafka.server.ReplicaManager.handleProduceAppend(ReplicaManager.scala:883)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceAppendJavaCompatible(ElasticKafkaApis.scala:455)
	kafka.automq.interceptor.NoopTrafficInterceptor.handleProduceRequest(NoopTrafficInterceptor.java:47)
	kafka.server.streamaspect.ElasticKafkaApis.doAppendRecords$1(ElasticKafkaApis.scala:406)
	kafka.server.streamaspect.ElasticKafkaApis.handleProduceRequest(ElasticKafkaApis.scala:417)
	kafka.server.KafkaApis.handle(KafkaApis.scala:191)
	kafka.server.streamaspect.ElasticKafkaApis.handle(ElasticKafkaApis.scala:205)
	kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:163)
	java.base/java.lang.Thread.run(Thread.java:833)
: 2 leak records were discarded because they were duplicates
: 5 leak records were discarded because the leak record count is targeted to 4. Use system property io.netty.leakDetection.targetRecords to increase the limit. (io.netty.util.ResourceLeakDetector)
